#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

############################
# install brew
# #########################
if [[ ! $(command -v brew) ]]; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

# Source Prezto.
if [[ ! -s"${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  git clone --recursive https://github.com/sorin-ionescu/prezto.git "${ZDOTDIR:-$HOME}/.zprezto"
else 
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi


# Customize to your needs...##################################################
# #################################
# local fileがあれば読み込む
# #################################
if [[ -s "~/dotfiles/.bin.local/.zshrc.local" ]]; then
    source ~/dotfiles/.bin.local/.zshrc.local
fi

## OS毎の設定を読み込む。
case ${OSTYPE} in
    darwin*)
        # Mac用の設定
        source ~/dotfiles/macOS/zshrc_mac
        ;;

    linux*)
        # Linux用の設定
        ;;
esac

#### TODO: 後からいい感じにする。
if [[ -s "~/dotfiles/.zsh/rc/git.zsh" ]] then; 
    source ~/dotfiles/.zsh/rc/git.zsh
fi 

### StarShip setting
if [[ ! $(command -v starship) ]]; then
    brew install starship
fi
eval "$(starship init zsh)"

# #################################
# zsh setting
# #################################
# 補完
# 補完機能を有効にする
autoload -Uz compinit
compinit

# 補完で小文字でも大文字にマッチさせる
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# ../ の後は今いるディレクトリを補完しない
zstyle ':completion:*' ignore-parents parent pwd ..

# sudo の後ろでコマンド名を補完する
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin \
                   /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin


########################################
# オプション
# 日本語ファイル名を表示可能にする
setopt print_eight_bit

# beep を無効にする
setopt no_beep

# '#' 以降をコメントとして扱う
setopt interactive_comments

# ディレクトリ名だけでcdする
setopt auto_cd

# cd したら自動的にpushdする
setopt auto_pushd
# 重複したディレクトリを追加しない
setopt pushd_ignore_dups

# スペースから始まるコマンド行はヒストリに残さない
setopt hist_ignore_space

# ヒストリに保存するときに余分なスペースを削除する
setopt hist_reduce_blanks

# 高機能なワイルドカード展開を使用する
setopt extended_glob

########################################
# キーバインド

# ^R で履歴検索をするときに * でワイルドカードを使用出来るようにする
bindkey '^R' history-incremental-pattern-search-backward

########################################

#######################################
# install fzf
# #####################################
if [[ ! $(command -v fzf) ]]; then
    brew install fzf
fi


########################################
# History 設定
export HISTFILE=$HOME/.zsh_history
export HISTSIZE=100000        # メモリ上の履歴リストに保存されるイベントの最大数
export SAVEHIST=100000        # 履歴ファイルに保存されるイベントの最大数

setopt hist_expire_dups_first # 履歴を切り詰める際に、重複する最も古いイベントから消す
setopt hist_ignore_all_dups   # 履歴が重複した場合に古い履歴を削除する
setopt hist_ignore_dups       # 前回のイベントと重複する場合、履歴に保存しない
setopt hist_save_no_dups      # 履歴ファイルに書き出す際、新しいコマンドと重複する古いコマンドは切り捨てる
setopt share_history          # 全てのセッションで履歴を共有する

function select-history() {
  BUFFER=$(history -n -r 1 | fzf --exact --reverse --query="$LBUFFER" --prompt="History > ")
  CURSOR=${#BUFFER}
  # zle accept-line # 選択したものを実行する。
}

zle -N select-history       # ZLEのウィジェットとして関数を登録
bindkey '^r' select-history # `Ctrl+r` で登録したselect-historyウィジェットを呼び出す

########################################

#######################################
# Setting for Cdr
if [[ -n $(echo ${^fpath}/chpwd_recent_dirs(N)) && -n $(echo ${^fpath}/cdr(N)) ]]; then
    autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
    add-zsh-hook chpwd chpwd_recent_dirs
    zstyle ':completion:*' recent-dirs-insert both
    zstyle ':chpwd:*' recent-dirs-default true
    zstyle ':chpwd:*' recent-dirs-max 1000
    zstyle ':chpwd:*' recent-dirs-file "$HOME/.cache/chpwd-recent-dirs"
fi

function peco-cdr () {
    local selected_dir="$(cdr -l | sed 's/^[0-9]\+ \+//' | fzf --exact --reverse --prompt="cdr >" --query "$LBUFFER")"
    if [ -n "$selected_dir" ]; then
        BUFFER="cd ${selected_dir}"
        zle accept-line # 選択したものを実行する。
    fi
}
zle -N peco-cdr
bindkey '^E' peco-cdr
# ####################################

#######################################
# Setting for exa
# #####################################
if [[ ! $(command -v eza) ]]; then
    brew install eza
fi

alias e='eza --icons'
alias l=e
alias ls=e
alias ea='eza -a --icons'
alias la=ea
alias ee='eza -aal --icons'
alias ll=ee
alias et='eza -T -L 3 -a -I "node_modules|.git|.cache" --icons'
alias lt=et
alias eta='eza -T -a -I "node_modules|.git|.cache" --color=always --icons | less -r'
alias lta=eta

if [[ ! $(command -v bat) ]]; then
    brew install bat
fi
alias cat=bat

######################################
# Setting for ghq
# brew install ghq
# ####################################
if [[ ! $(command -v ghq) ]]; then
    brew install ghq
fi
alias ghq-cd='cd $(ghq list --full-path | fzf)'

#####################################
# windows setting
# ###################################

if [[ "$(uname -r)" == *microsoft* ]]; then
    ## windows への接続IPを設定 
    export WIN_IP=$(cat /etc/resolv.conf | grep nameserver | cut -d' ' -f2)
    export ADB_SERVER_SOCKET=tcp:$WIN_IP:5037
fi

####################################
# Setting for gcloud
# #################################
if [[ ! $(command -v gcloud) ]]; then
    brew install --cask google-cloud-sdk
fi
source '/opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc'
source '/opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc'

#####################################
# go
####################################
export GOPATH=$HOME/go
export GOBIN=$GOPATH/bin
export PATH=$PATH:$GOBIN

###########################
# brew setting
# ########################
export PATH=$HOME/.nodebrew/current/bin:$PATH

###########################
# Obsidian MCP
# ########################
function obs() {
  (
    cd ~/Library/Mobile\ Documents/iCloud\~md\~obsidian/Documents/Ideastorage/ \
    && claude -p "obsidianで次を調査:「$1」。タイトルだけでなく、本文も含めて探してください。また、ファイルを出力する際は、ターミナル上からすぐにアクセスできる様にObsidian URLを一緒に出力してください。" \
    | BAT_PAGER="" cat -l markdown
  )
}

##########################
# jetbrains
# #######################
export PATH="$PATH:/Users/sahashi/Library/Application Support/JetBrains/Toolbox/scripts"

#################
# haskell ghcpu setting
# ###############
export PATH="$PATH:$HOME/.ghcup/bin"


#####################
## awk -> gawk
## ##################
if [[ ! $(command -v gawk) ]]; then
    echo "install gawk"
    brew install gawk
fi
alias awk=gawk


###################
## setting for mise
##################
if [[ ! $(command -v mise) ]]; then
    brew install mise
fi
eval "$(/opt/homebrew/bin/mise activate zsh)"


if [[ ! $(command -v htop) ]]; then
    brew install htop
fi
alias top=htop


#################
# docker alias
# ###############
alias docker-stop1='docker stop $(docker ps -l -q)'


alias jqclip='pbpaste | jq'

alias vim=nvim

### MANAGED BY RANCHER DESKTOP START (DO NOT EDIT)
export PATH="/Users/sahashi/.rd/bin:$PATH"
### MANAGED BY RANCHER DESKTOP END (DO NOT EDIT)
export PATH="/opt/homebrew/opt/postgresql@15/bin:$PATH"

